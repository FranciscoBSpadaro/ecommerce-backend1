const User = require("../models/User");                                   // Importa o modelo do usu√°rio
const passwordUtils = require('../utils/passwordUtils');                  // Importa fun√ß√µes √∫teis do bcrypt para lidar com senhas
const jwt = require('jsonwebtoken');                                      // Importa a biblioteca de gera√ß√£o de tokens JWT
const { validationResult } = require('express-validator');                // Importa a fun√ß√£o de valida√ß√£o de entrada

const handleValidationErrors = (req, res, next) => {                      // Middleware para lidar com erros de valida√ß√£o
  const errors = validationResult(req);                                   // Obt√©m os erros de valida√ß√£o da requisi√ß√£o
  if (!errors.isEmpty()) {                                                // se nao estiver vazio e houver erros execute o codigo abaixo com array de erros.
    return res.status(400).json({ errors: errors.array() });              // Retorna uma resposta com erro 400 se houver erros de valida√ß√£o
  }
  next();
};

const handle404Error = (res, message) => {                                // Fun√ß√£o utilit√°ria para lidar com erros 404 para o array
  return res.status(404).json({ message: `${message} üîç` });              // Retorna uma resposta com erro 404 e uma mensagem personalizada
};

const handle400Error = (res, message) => {
  return res.status(400).json({ message });
};

const handle401Error = (res, message) => {
  return res.status(401).json({ message });
};

exports.createUser = async (req, res) => {                                 // Rota para criar um novo usu√°rio
  try {
    const { username, password, email } = req.body;                        // Obt√©m os dados do corpo da requisi√ß√£o
    const userAlreadyExists = await User.findOne({ where: { username } }); // Verifica se o usu√°rio j√° existe no banco de dados

    if (userAlreadyExists) {
      return handle400Error(res, `‚ö† O Usu√°rio ${username} j√° est√° cadastrado ‚ö†`); // Retorna uma resposta com erro 400 se o usu√°rio j√° existir
    }

    const hashedPassword = await passwordUtils.hashPassword(password);     //  Gera um hash da senha com a fun√ß√£o hashPassword do bcrypt
    const user = await User.create({ username, email, password: hashedPassword }); // Cadastra o usu√°rio no banco de dados com a senha criptografada

    console.log(user);
    res.status(201).json({ message: `ü§ñ O Usu√°rio ${username}, foi Cadastrado com Sucesso! ü§ñ` });
  } catch (error) {
    console.error(error);
    res.status(400).json({ message: "‚ö† E-mail inv√°lido ou j√° cadastrado ‚ö†" });
  }
};

exports.loginUser = async (req, res) => {                                    // Rota para fazer login de um usu√°rio
  try {
    const { username, password } = req.body;                                 // Obt√©m os dados do corpo da requisi√ß√£o
    const user = await User.findOne({ where: { username } });                // Verifica se o usu√°rio existe no banco de dados

    if (!user) {                                                             // se resultado for diferente de um usu√°rio retorna erro , 404
      return handle404Error(res, "Usu√°rio n√£o encontrado.");
    }

    const passwordMatch = await passwordUtils.comparePasswords(password, user.password); // Verifica se a senha fornecida pelo usu√°rio corresponde √† senha armazenada e usa a fun√ß√£o do bcrypt comparePassword e compara a senha criptografa

    if (passwordMatch) {                                                      // se a senha for correta faz o login do usu√°rio
      console.log(`üîì Login realizado com sucesso para o usu√°rio ${username} üîì`);
      const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, {  //  Gera um token JWT v√°lido por um per√≠odo de tempo definido nas vari√°veis de ambiente
        expiresIn: process.env.JWT_TIME
      });
      console.log(token);                                                     // printa o JWtoken no console.log apenas para usar esses tokens nos testes de api no insomnia , em produ√ß√£o esse console.log deve ser removido.
      res.status(200).json({ message: `Login realizado com sucesso. üîëüîì` });
    } else {
      handle401Error(res, "‚ö† Senha incorreta ‚ö†");
    }
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: error.message });
  }
};

exports.updateUserEmail = async (req, res) => {                             // Rota para atualizar e-mail do usu√°rio
  try {
    const { id } = req.params;                                              // busca o id do usuario pela rota da requisi√ß√£o
    const { email } = req.body;                                             // apenas o email √© enviado no corpo da requisi√ß√£o

    const [updatedRows] = await User.update({ email }, { where: { id } });  // Busca na tabela de usu√°rios o atributo email pelo id
    if (updatedRows === 0) {                                                // se retorna indice 0 n√£o localizou registros pelo id e retorna erro 404
      return handle404Error(res, 'Usu√°rio n√£o encontrado.');
    }

    console.log(`User ID ${id} email atualizado para ${email}`);
    res.status(200).json({ message: 'ü§ñ E-mail Atualizado com Sucesso. ü§ñ' });
  } catch (error) {
    console.error(error);
    res.status(400).json({ message: '‚ö† E-mail inv√°lido ou j√° cadastrado ‚ö†' });
  }
};

exports.deleteUser = async (req, res) => {                                  // Rota para deletar um usu√°rio
  try {
    const { id } = req.params;                                             // id deve ser fornecido pela rota da requisi√ß√£o

    const deletedRows = await User.destroy({ where: { id } });            // deleta o usu√°rio pelo id
    if (deletedRows === 0) {                                              // se n√£o encontra nenhum id retorna 404
      return handle404Error(res, 'Usu√°rio n√£o encontrado.');
    }

    console.log(`User ID "${id}" exclu√≠do.`);
    res.status(200).json({ message: "üëã Usu√°rio exclu√≠do com sucesso. üëã" });
  } catch (error) {
    console.error(error);
    res.status(401).json({ message: error.message });                // erro 401 apenas um usu√°rio autenticado pode fazer isso. se for adm
  }
};

exports.getUserByID = async (req, res) => {                           // Rota para localizar um usu√°rio pelo id
  try {
    const { id } = req.params;                                       // id deve ser fornecido pela rota da requisi√ß√£o

    const user = await User.findOne({ where: { id } });             // busca na tabela de usu√°rios o id fornecido
    if (!user) {                                                    // se nao retornar um usu√°rio retorna erro 404
      return handle404Error(res, 'Usu√°rio n√£o encontrado.');
    }

    return res.json(user);
  } catch (error) {
    console.error(error);
    return res.status(401).json({ message: error.message });
  }
};

exports.getAllUsers = async (req, res) => {                    // busca todos os usu√°rios cadastrados.
  try {
    const users = await User.findAll();
    res.status(200).json(users);
  } catch (error) {
    console.error(error);
    res.status(401).json({ message: error.message });        // 401 somente adms
  }
};
