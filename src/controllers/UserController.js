// Importar o modelo de usu√°rio
const User = require("../models/User");                                    // importando o modelo User.js

const passwordUtils = require('../utils/passwordUtils');                   // importando o arquivo de configura√ß√µes do bcrypt 

const { isUserAlreadyRegistered } = require('../utils/validationUtils');   // importando o validador de usu√°rio j√° cadastrado

// Fun√ß√£o para criar usu√°rios
exports.createUser = async (req, res) => {
  try {
    const { username, password } = req.body;                              // vari√°vel para validar usarios pelo username cadastro no db                                     // vari√°vel para criar um novo usu√°rio utilizando o bcrypt para criptografar as senhas no banco de dados
    const userAlreadyExists = await isUserAlreadyRegistered(username);    // vari√°vel que instancia o validationUtils.ja e verifica se o usu√°rio j√° est√° cadastrado
    if (userAlreadyExists) {                                              // se username j√° √© cadastrado retorna erro 400
      return res.status(400).json({ message: `‚ö† O Usu√°rio ${username} j√° est√° cadastrado ‚ö†` });
    }
    const hashedPassword = await passwordUtils.hashPassword(password);    // vari√°vel que instancia o bcrypt passwordUtils.js
    const user = new User({ ...req.body, password: hashedPassword });     // convertendo senha digitada pelo usu√°rio em senha criptografada
    const newUser = await user.save();                                    // salva o usu√°rio no db com a senha criptografada
    console.log(newUser)
    res.status(201).json({ message: `ü§ñ O Usu√°rio ${username}, foi Cadastrado com Sucesso! ü§ñ` }); // se remover a 'mensagem' e add newUser retorna todo o res.status
  }
  catch (error) {
    console.error(error);
    res.status(400).json({ message: "‚ö† E-mail inv√°lido ou j√° cadastrado ‚ö†" });  // se colocar error.message ou apenas error vai aparecer como erro de valida√ß√£o de email
  }
};
// Fun√ß√£o para atualizar um usu√°rio pelo ID
exports.updateUserEmail = async (req, res) => {
  try {
    const { id } = req.params;                                               // Adicionado o par√¢metro da rota que devem ser atualizados no put ' id '
    const { email } = req.body;                                              // Adicionado o atributo do corpo da requisi√ß√£o que ser√° atualizado 'email'
    const updatedUser = await User.update(                                   // Fun√ß√£o para atualizar os dados  de email, pelo id
      { email },
      { where: { id } }
    );
    if (updatedUser[0] === 0) {                                              // Se nenhum usu√°rio foi atualizado, devido a  id invalido apresenta erro 404
      return res.status(404).json({ message: 'Usu√°rio n√£o encontrado. üîç' });
    }
    console.log(`E-mail do Usu√°rio ID ${id} foi alterado para ${email}`)
    res.status(200).json({ message: 'ü§ñ E-mail Alterado com Sucesso. ü§ñ' });
  }
  catch (error) {
    console.error(error);
    res.status(400).json({ message: '‚ö† E-mail inv√°lido ou j√° cadastrado ‚ö†' });
  }
};
// Fun√ß√£o para excluir um usu√°rio pelo ID
exports.deleteUser = async (req, res) => {
  try {
    const result = await User.destroy({ where: { id: req.params.id } });         // Buscar o usu√°rio com o ID fornecido no banco de dados e remov√™-lo
    if (!result) {                                                               // Se o usu√°rio n√£o existir, retornar uma mensagem de erro com o c√≥digo de status 404 (Not Found)
      return res.status(404).json({ message: "Usu√°rio n√£o encontrado. üîç" });
    }
    console.log(`Aten√ß√£o o Usu√°rio ID "${req.params.id}" foi excluido.`)
    res.status(200).json({ message: "üëã Usu√°rio exclu√≠do com sucesso. üëã" });
  }
  catch (error) {
    res.status(401).json({ message: error.message });
  }
};
// Fun√ß√£o para buscar todos usu√°rios os pelo id
exports.getUsersbyID = async (req, res) => {
  try {
    const id = req.params.id;                                                   // obt√©m o ID da URL da requisi√ß√£o
    const users = await User.findByPk(id);                                      // busca o usu√°rio pelo ID que √© uma Primary Key no DB
    if (!users) {                                                               // se o resultado for diferente de users ent√£o retorna erro 404
      return res.status(404).json({ message: "Usu√°rio n√£o encontrado. üîç" });
    }
    return res.json(users);
  }
  catch (error) {
    console.error(error);
    return res.status(400).json({ message: error.message });
  }
};
// Fun√ß√£o para obter todos os usu√°rios
exports.getAllUsers = async (req, res) => {
  try {
    const users = await User.findAll();                                       // Buscar todos os usu√°rios no banco de dados
    res.status(200).json(users);                                              // Retornar a lista de usu√°rios em formato JSON
  }
  catch (error) {
    console.error(error);
    res.status(401).json({ message: error.message });
  }
};