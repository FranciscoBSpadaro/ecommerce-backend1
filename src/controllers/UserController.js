const User = require("../models/User");                                   // Importa o modelo do usu√°rio
const passwordUtils = require('../utils/passwordUtils');                  // Importa fun√ß√µes √∫teis do bcrypt para lidar com senhas
const generateVerificationCode = require('../utils/VerificationCode');    // importa fun√ß√µes √∫teis para gerar codigos
const jwt = require('jsonwebtoken');                                      // Importa a biblioteca de gera√ß√£o de tokens JWT
const EmailController = require('../controllers/EmailController');        // Importa as fun√ß√µes de envio de email
const { Op } = require('sequelize');                                      // operadores no c√≥digo da consulta em loginUser
const Admincheck = require ('../middlewares/Admincheck')




exports.createUser = async (req, res) => {                                       // Rota para criar um novo usu√°rio
  try {
    const { username, email, password } = req.body;                                       // Obt√©m os dados do corpo da requisi√ß√£o
    const userAlreadyExists = await User.findOne({ where: { email } });         // Verifica se o usu√°rio j√° existe no banco de dados

    if (userAlreadyExists) {
      res.status(400).json({ message: `‚ö† O Cliente com e-mail ${email} j√° est√° cadastrado ‚ö†`}); // Retorna uma resposta com erro 400 se o usu√°rio j√° existir
    }

    const hashedPassword = await passwordUtils.hashPassword(password);              //  Gera um hash da senha com a fun√ß√£o hashPassword do bcrypt
    const verificationCode = generateVerificationCode(8);                           // gera o godigo de verifica√ß√£o 
    await EmailController.sendWelcome(email, verificationCode);                     // envia o email de bem vindo com o codigo para validar o email
    const user = await User.create({ username, email, password: hashedPassword, verificationCode });            // Cadastra o usu√°rio no banco de dados com a senha criptografada
    console.log(user);
    res.status(201).json({ message: `ü§ñ O Cliente ${username} com E-mail. ${email}, foi Cadastrado com Sucesso! ü§ñ` });
  } catch (error) {
    console.error(error);
    res.status(400).json({ message: "‚ö† E-mail inv√°lido ou j√° cadastrado ‚ö†" });
  }
};


exports.loginUser = async (req, res) => {
  try {
    const { email, username, password } = req.body;
    const user = await User.findOne({
      where: {
        [Op.or]: [  // login com email ou username
          { email },
          { username }
        ]
      }
    });

    if (!user) {
      return res.status(404).json({ message: "Cliente n√£o encontrado." });
    }

    const passwordMatch = await passwordUtils.comparePasswords(password, user.password);

    if (passwordMatch) {                                                    // se a senha for correta faz o login
      console.log(`üîì Login realizado com sucesso para o usu√°rio ${username} ${email} üîì`);
      const token = jwt.sign({                                              // gerar JWToken ao usu√°rio
        username: user.username,
        isEmailValidated: user.isEmailValidated,                             // verifica se o usuario jav validou o email true or false pra notificar no front end
        isAdmin: user.isAdmin,                                               // adiciona no token o atributo isAdmin do usuario para verificar se √© um adm quando as rotas forem executadas                                   
        isMod: user.isMod                                              
      },
        process.env.JWT_SECRET,                                             // senha do token definida no vari√°vel de ambiente
        {
          expiresIn: process.env.JWT_TIME                                   // tempo de expira√ßao do token definido na vari√°vel de ambiente
        });

      res.status(200).json({ message: `üîë Login realizado Aproveite a Loja üõí`, token  });
      

    } else {
      res.status(400).json({ message: "‚ö† Senha incorreta ‚ö†"});
    }
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: error.message });
  }
};


exports.updateUserEmail = async (req, res) => {                             // Rota que o cliente usa para troca de email
  try {
    const authorizationHeader = req.headers.authorization;
    if (!authorizationHeader) {
      return res.status(401).json({ message: 'Token de autoriza√ß√£o n√£o fornecido.' });
    }

    const token = authorizationHeader.split(' ')[1];
    if (!token) {
      return res.status(401).json({ message: 'Token JWT n√£o encontrado.' });
    }

    const decodedToken = jwt.verify(token, process.env.JWT_SECRET);
    if (!decodedToken) {
      return res.status(401).json({ message: 'Token JWT inv√°lido.' });
    }

    const { username } = decodedToken;
    const { email } = req.body;

    const [updatedRows] = await User.update(
      { email }, { where: {username} }
      );
    if (updatedRows === 0) {                                                // se retorna indice 0 n√£o localizou registros pelo id e retorna erro 404
      res.status(404).json({ message: 'Usu√°rio n√£o encontrado.'});
    }
    await EmailController.sendVerificationEmail(email, verificationCode);
    await User.update(
      { isEmailValidated: false }, { where: { email } }
      );

    console.log(`Cliente ${username} email atualizado para ${email} Enviado email para verifica√ß√£o`);
    res.status(200).json({ message: 'ü§ñ E-mail Atualizado com Sucesso. ü§ñ' });
  } catch (error) {
    console.error(error);
    res.status(400).json({ message: '‚ö† E-mail inv√°lido ou j√° cadastrado ‚ö†' });
  }
};

// Rota ADM
exports.deleteUser = async (req, res) => {
  try {
    const requestingUser = Admincheck // verifica se √© admin

    if (!requestingUser) {
      return res.status(403).json({ message: 'Voc√™ n√£o tem permiss√£o para excluir usu√°rios.' });
    }

    const { username } = req.body;

    const userToDelete = await User.findOne({ where: { username } });

    if (!userToDelete) {
      return res.status(404).json({ message: 'Usu√°rio n√£o encontrado.' });
    }

    if (userToDelete.isAdmin === true) {
      return res.status(403).json({ message: 'N√£o √© poss√≠vel excluir um usu√°rio administrador.' });
    }

    const deletedRows = await User.destroy({ where: { username } });

    if (deletedRows === 0) {
      return res.status(400).json({ message: 'Nenhum usu√°rio foi exclu√≠do' });
    }

    console.log(` "${username}" exclu√≠do.`);
    return res.status(200).json({ message: 'üëã Usu√°rio exclu√≠do com sucesso. üëã' });
  } catch (error) {
    console.error(error);
    return res.status(500).json({ message: error.message });
  }
};

// ROTA ADM
exports.getUsername = async (req, res) => {
  try {
    const username = req.boby                                            // define objeto de username pela rota da requisi√ß√£o                      
    const user = await User.findOne({ where: username });                    // busca na tabela de Usu√°rios o username fornecido                 
    if (!user)                                                         // se n√£o houver usu√°rios com o id fornecido retorna erro 404         
      return handle404Error(res, 'Usu√°rio n√£o encontrado.');

    return res.json(user);                                              // retorna dados do usu√°rio
  } catch (error) {
    console.error(error);
    return res.status(401).json({ message: error.message });
  }
};

// ROTA ADM
exports.getAllUsers = async (req, res) => {
  try {
    const users = await User.findAll();                                  // busca todos os usu√°rios no banco de dados
    res.status(200).json(users);
  } catch (error) {
    console.error(error);
    res.status(401).json({ message: error.message });
  }
};


exports.getUserByEmail = async (req, res) => {
  try {
    const { email } = req.body; // Busca o e-mail no corpo da requisi√ß√£o
    const user = await User.findOne({ where: { email } }); // Busca o usu√°rio com base no e-mail

    if (!user)
    res.status(404).json({ message: 'Usu√°rio n√£o encontrado.'});

    return res.json(user); // Retorna o nome de usu√°rio encontrado
  } catch (error) {
    console.error(error);
    return res.status(401).json({ message: error.message });
  }
};