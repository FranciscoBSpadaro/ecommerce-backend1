const User = require('../models/User');
const UserDetails = require('../models/UserDetails');
const jwt = require('jsonwebtoken');
const { JWT_SECRET, JWT_TIME } = process.env;
const { hashPassword, comparePasswords } = require('../utils/passwordUtils');
const generateVerificationCode = require('../utils/verificationCode');
const { sendWelcomeEmail, sendVerificationEmail } = require('../controllers/EmailController');
const { Op } = require('sequelize');
const { validationResult } = require('express-validator');

// Fun√ß√£o para criar um novo usu√°rio
const createUser = async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const { username, email, password } = req.body;

    // Verificar se j√° existe um usu√°rio com o mesmo nome de usu√°rio
    const usernameAlreadyExists = await User.findOne({ where: { username } });
    if (usernameAlreadyExists) {
      return res.status(400).json({
        message: `J√° existe um cadastro com ${username}. Por favor, escolha outro nome de usu√°rio.`,
      });
    }

    // Verificar se o usu√°rio com o email fornecido j√° existe
    const userAlreadyExists = await User.findOne({ where: { email } });
    if (userAlreadyExists) {
      return res.status(400).json({
        message: `J√° existe um cadastro com ${email}. Por favor, escolha outro e-mail.`,
      });
    }

    // Criar um hash da senha do usu√°rio para seguran√ßa
    const hashedPassword = await hashPassword(password);

    // Gerar c√≥digo de verifica√ß√£o e enviar email de verifica√ß√£o
    const verificationCode = generateVerificationCode(8);
    await sendWelcomeEmail(email, verificationCode);

    // Criar novo usu√°rio no banco de dados
    const user = await User.create({
      username,
      email,
      password: hashedPassword,
    });

    await UserDetails.create({
      userId: user.id,
      verificationCode,
    });

    console.log(user); // remover quando em produ√ßao
    return res.status(201).json({
      message: `ü§ñ Cadastro Realizado com Sucesso! Verifique seu e-mail ü§ñ`,
    });
  } catch (error) {
    console.error(error);
    return res.status(500).json({ message: error.message });
  }
};

// Fun√ß√£o para realizar login do usu√°rio
const loginUser = async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const { email, username, password } = req.body;

    // Buscar usu√°rio por email ou nome de usu√°rio
    const user = await User.findOne({
      where: {
        [Op.or]: [{ email }, { username }],
      },
    });

    if (!user) {
      return res.status(404).json({ message: 'Usu√°rio n√£o encontrado.' });
    }

    // Buscar detalhes do usu√°rio no banco de dados
    const userDetails = await UserDetails.findOne({
      where: {
        userId: user.id,
      },
    });

    if (!userDetails) {
      return res
        .status(404)
        .json({ message: 'Detalhes do usu√°rio n√£o encontrados.' });
    }

    // Comparar a senha com a senha criptografada no banco de dados
    const passwordMatch = await comparePasswords(password, user.password);

    if (passwordMatch) {
      console.log(`üîì Usu√°rio ${username} ${email} logado com sucesso üîì`);

      // Gerar token JWT
      const token = jwt.sign(
        {
          id: user.id, // Use o ID do usu√°rio em vez do nome de usu√°rio
          username: user.username,
          isEmailValidated: userDetails.isEmailValidated,
          isAdmin: userDetails.isAdmin,
          isMod: userDetails.isMod,
        },
        JWT_SECRET,
        {
          expiresIn: JWT_TIME,
        },
      );

      return res
        .status(200)
        .json({ message: `üîë Login bem sucedido! Boas compras üõí`, token });
    } else {
      res.status(400).json({ message: '‚ö† Senha incorreta ‚ö†' });
    }
  } catch (error) {
    console.error(error);
    return res.status(500).json({ message: error.message });
  }
};

// Fun√ß√£o para obter o nome de usu√°rio para exibir no front-end
const getUsername = async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const { id } = req.decodedToken;
    const user = await User.findOne({ where: { id } });

    if (!user) {
      return res.status(404).json({ message: 'Usu√°rio n√£o encontrado üîç' });
    }

    return res.json(user);
  } catch (error) {
    console.error(error);
    return res.status(401).json({ message: error.message });
  }
};

// Fun√ß√£o para atualizar o email do usu√°rio
const updateUserEmail = async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const { id } = req.decodedToken; // Use o ID do usu√°rio do token decodificado
    const { email } = req.body;

    // Buscar usu√°rio por ID
    const user = await User.findOne({ where: { id } });
    if (!user) {
      return res.status(404).json({ message: 'Usu√°rio n√£o encontrado.' });
    }

    // Atualizar o email do usu√°rio
    await User.update({ email }, { where: { id } });

    const verificationCode = generateVerificationCode(8);
    await sendVerificationEmail(email, verificationCode);

    // Atualizar o campo isEmailValidated no modelo UserDetails
    await UserDetails.update(
      { isEmailValidated: false },
      { where: { userId: id } },
    ); // Use o ID do usu√°rio para atualiza√ß√£o

    console.log(
      `Usu√°rio ${user.username} email atualizado para ${email}. Email de verifica√ß√£o enviado.`,
    );
    return res
      .status(200)
      .json({ message: 'ü§ñ Email atualizado com sucesso. ü§ñ' });
  } catch (error) {
    console.error(error);
    return res.status(500).json({ message: error.message });
  }
};

// Fun√ß√£o para deletar um usu√°rio (somente administradores podem executar esta a√ß√£o)
const deleteUser = async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const { username } = req.body;

    const userToDelete = await User.findOne({ where: { username } });

    if (!userToDelete) {
      return res.status(404).json({ message: 'Usu√°rio n√£o encontrado.' });
    }

    // Buscar detalhes do usu√°rio no banco de dados
    const userDetails = await UserDetails.findOne({
      where: {
        userId: userToDelete.id,
      },
    });

    if (!userDetails) {
      return res
        .status(404)
        .json({ message: 'Detalhes do usu√°rio n√£o encontrados.' });
    }

    if (userDetails.isAdmin === true) {
      return res
        .status(403)
        .json({ message: 'Voc√™ n√£o pode Excluir um Usu√°rio Administrador.' });
    }

    const deletedRows = await User.destroy({ where: { username } });

    if (deletedRows === 0) {
      return res.status(400).json({ message: 'Nenhum usu√°rio foi deletado.' });
    }

    console.log(`Usu√°rio "${username}" deletado.`);
    return res
      .status(200)
      .json({ message: 'üëã Usu√°rio deletado com sucesso. üëã' });
  } catch (error) {
    console.error(error);
    return res.status(500).json({ message: 'N√£o √© Possivel excluir um usu√°rio com perfil Associado a ele' });
  }
};

// Fun√ß√£o para obter todos os usu√°rios (somente administradores podem executar esta a√ß√£o)
const getAllUsers = async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const users = await User.findAll();
    return res.status(200).json(users);
  } catch (error) {
    console.error(error);
    return res.status(401).json({ message: error.message });
  }
};

// Fun√ß√£o para obter usu√°rio pelo email (somente administradores podem executar esta a√ß√£o)
const getUserByEmail = async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const { email } = req.body;
    const user = await User.findOne({ where: { email } });

    if (!user) {
      res.status(404).json({ message: 'Usu√°rio n√£o encontrado.' });
    }

    return res.json(user);
  } catch (error) {
    console.error(error);
    return res.status(401).json({ message: error.message });
  }
};

module.exports = {
  createUser,
  loginUser,
  getUsername,
  updateUserEmail,
  deleteUser,
  getAllUsers,
  getUserByEmail,
};
